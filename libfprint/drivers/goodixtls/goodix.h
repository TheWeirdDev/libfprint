/*
 * Goodix Tls driver for libfprint
 *
 * Copyright (C) 2021 Alexander Meiler <alex.meiler@protonmail.com>
 * Copyright (C) 2021 Matthieu CHARETTE <matthieu.charette@gmail.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */

#pragma once

#include <glib.h>
#include <openssl/err.h>
#include <openssl/ssl.h>
#include <pthread.h>
#include <stdint.h>

#define GOODIX_INTERFACE 0
#define GOODIX_EP_OUT 0x1
#define GOODIX_EP_IN 0x81

// 1 seconds USB timeout
#define GOODIX_TIMEOUT 1000

#define GOODIX_FIRMWARE_VERSION_SUPPORTED "GF_ST411SEC_APP_12109"

#define GOODIX_PSK_LEN 32

guint8 zero_psk_hash[] = {0xBA, 0x1A, 0x86, 0x03, 0x7C, 0x1D, 0x3C, 0x71,
                          0xC3, 0xAF, 0x34, 0x49, 0x55, 0xBD, 0x69, 0xA9,
                          0xA9, 0x86, 0x1D, 0x9E, 0x91, 0x1F, 0xA2, 0x49,
                          0x85, 0xB6, 0x77, 0xE8, 0xDB, 0xD7, 0x2D, 0x43};

guint8 device_config[] = {
    0x70, 0x11, 0x60, 0x71, 0x2C, 0x9D, 0x2C, 0xC9, 0x1C, 0xE5, 0x18, 0xFD,
    0x00, 0xFD, 0x00, 0xFD, 0x03, 0xBA, 0x00, 0x01, 0x80, 0xCA, 0x00, 0x04,
    0x00, 0x84, 0x00, 0x15, 0xB3, 0x86, 0x00, 0x00, 0xC4, 0x88, 0x00, 0x00,
    0xBA, 0x8A, 0x00, 0x00, 0xB2, 0x8C, 0x00, 0x00, 0xAA, 0x8E, 0x00, 0x00,
    0xC1, 0x90, 0x00, 0xBB, 0xBB, 0x92, 0x00, 0xB1, 0xB1, 0x94, 0x00, 0x00,
    0xA8, 0x96, 0x00, 0x00, 0xB6, 0x98, 0x00, 0x00, 0x00, 0x9A, 0x00, 0x00,
    0x00, 0xD2, 0x00, 0x00, 0x00, 0xD4, 0x00, 0x00, 0x00, 0xD6, 0x00, 0x00,
    0x00, 0xD8, 0x00, 0x00, 0x00, 0x50, 0x00, 0x01, 0x05, 0xD0, 0x00, 0x00,
    0x00, 0x70, 0x00, 0x00, 0x00, 0x72, 0x00, 0x78, 0x56, 0x74, 0x00, 0x34,
    0x12, 0x20, 0x00, 0x10, 0x40, 0x2A, 0x01, 0x02, 0x04, 0x22, 0x00, 0x01,
    0x20, 0x24, 0x00, 0x32, 0x00, 0x80, 0x00, 0x01, 0x00, 0x5C, 0x00, 0x80,
    0x00, 0x56, 0x00, 0x04, 0x20, 0x58, 0x00, 0x03, 0x02, 0x32, 0x00, 0x0C,
    0x02, 0x66, 0x00, 0x03, 0x00, 0x7C, 0x00, 0x00, 0x58, 0x82, 0x00, 0x80,
    0x15, 0x2A, 0x01, 0x82, 0x03, 0x22, 0x00, 0x01, 0x20, 0x24, 0x00, 0x14,
    0x00, 0x80, 0x00, 0x01, 0x00, 0x5C, 0x00, 0x00, 0x01, 0x56, 0x00, 0x04,
    0x20, 0x58, 0x00, 0x03, 0x02, 0x32, 0x00, 0x0C, 0x02, 0x66, 0x00, 0x03,
    0x00, 0x7C, 0x00, 0x00, 0x58, 0x82, 0x00, 0x80, 0x1F, 0x2A, 0x01, 0x08,
    0x00, 0x5C, 0x00, 0x80, 0x00, 0x54, 0x00, 0x10, 0x01, 0x62, 0x00, 0x04,
    0x03, 0x64, 0x00, 0x19, 0x00, 0x66, 0x00, 0x03, 0x00, 0x7C, 0x00, 0x01,
    0x58, 0x2A, 0x01, 0x08, 0x00, 0x5C, 0x00, 0x00, 0x01, 0x52, 0x00, 0x08,
    0x00, 0x54, 0x00, 0x00, 0x01, 0x66, 0x00, 0x03, 0x00, 0x7C, 0x00, 0x01,
    0x58, 0x00, 0x89, 0x2E};

G_DECLARE_FINAL_TYPE(FpiDeviceGoodixTls, fpi_device_goodixtls, FPI,
                     DEVICE_GOODIXTLS, FpImageDevice);

static const FpIdEntry id_table[] = {
    {.vid = 0x27C6, .pid = 0x5110},
    {.vid = 0, .pid = 0, .driver_data = 0},
};

static void goodix_dev_reset_state(FpiDeviceGoodixTls *goodixdev);

static void goodix_receive_data_cb(FpiUsbTransfer *transfer, FpDevice *dev,
                                   gpointer user_data, GError *error);

gchar *data_to_str(gpointer data, gsize data_len);
